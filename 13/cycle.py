# s = ['АБГ', 'БД', 'ВАБДГЖ', 'ГЖ', 'ДЗЕК', 'ЕВКИ', 'ЖЕ', 'ЗК', 'ИЖ', 'КИ']
# s = ['АБВ', 'БГ', 'ВГЕ', 'ГДЕА', 'ДЖ', 'ЕЖИ', 'ЖГЗК', 'ЗБД', 'ИКЖ', 'КЗ']
# s = ['АВ', 'БГА', 'ВГЕ', 'ГЕД', 'ДЖ', 'ЕЖИ', 'ЖГЗК', 'ЗБД', 'ИКЖ', 'КЗ']
# пути: первая буква - откуда, остальные - куда.
s = ['AHL', 'BAC', 'CAD', 'DE', 'EF', 'FLG', 'GAB', 'HIC',
	 'IJD', 'JE', 'KAJ', 'LK']
# преобразуем в словарь, ключ - вершина, значение - куда можно пойти
d = {i[0]: i[1:] for i in s}
start = 'A'  # начальная точка
ways = {start}  # множество из всех текущих путей
c = set()  # тут будут подходящие пути
# пока есть незаконченные маршруты
while ways:
	# все возможные передвижения
    ways = {i + j for i in ways for j in d[i[-1]]}  
    # убираем те, которые 
    # начинаются и заканчиваются в начальной точке
    c |= {i for i in ways if i[0] == i[-1] == start}  
    # убираем все маршруты, где вершины попали дважды
    ways = {w for w in ways if all(w.count(j) == 1 for j in w)}
print(len(c))
